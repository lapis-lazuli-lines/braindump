// server/src/services/dbService.ts
import { supabase } from "../utils/supabaseClient"; // Using path alias from tsconfig

interface SavedDraft {
	id?: string; // UUID is generated by DB
	prompt: string;
	draft: string;
	created_at?: string;
}

export const saveDraft = async (prompt: string, draft: string): Promise<SavedDraft> => {
	console.log("Attempting to save draft to Supabase..."); // Log
	const { data, error } = await supabase.from("saved_drafts").insert([{ prompt, draft }]).select().single(); // Use single() if you expect one row back after insert

	if (error) {
		console.error("Supabase error saving draft:", error);
		throw new Error(`Supabase error: ${error.message}`);
	}
	if (!data) {
		console.error("Supabase returned no data after insert.");
		throw new Error("Failed to save draft: No data returned.");
	}
	console.log("Draft saved successfully:", data); // Log success
	return data as SavedDraft; // Type assertion
};

export const getSavedDrafts = async (): Promise<SavedDraft[]> => {
	console.log("Fetching saved drafts from Supabase..."); // Log
	const { data, error } = await supabase.from("saved_drafts").select("*").order("created_at", { ascending: false }); // Get newest first

	if (error) {
		console.error("Supabase error fetching drafts:", error);
		throw new Error(`Supabase error: ${error.message}`);
	}
	console.log(`Fetched ${data?.length || 0} drafts.`); // Log count
	return (data as SavedDraft[]) || []; // Return empty array if null/undefined
};
